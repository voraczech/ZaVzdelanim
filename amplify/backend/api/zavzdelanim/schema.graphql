type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Event @model @searchable
 {
  id: ID!
  title: String!
  description: String
  date: AWSTimestamp
  dateEnd: AWSTimestamp
  place: String
  image: S3Object
  tags: String
  host: [Host] @connection(keyName: "HostEvent", fields: ["id"])
  attendence: [Attendence] @connection(keyName:"AttendenceEvent", fields: ["id"])
  speaking: [Speaking] @connection(keyName: "SpeakingEvent", fields: ["id"])
}

type User @model {
  id: ID!
  cognitoId: String!
  attendence: [Attendence] @connection(keyName:"AttendenceUser", fields: ["id"])
  speaker: Speaker @connection
  creator: [Organization] @connection(keyName: "CreatorUser", fields: ["id"])
  admin: [Admin] @connection(keyName: "AdminUser", fields: ["id"])
}

type Organization @model @searchable @auth(rules: [
   { allow: owner, operations: [create, update, delete] },
   { allow: owner, ownerField: "admins", operations: [update] }
])
  @key(name: "CreatorUser", fields: ["creatorID", "name"])
{
  id: ID!
  name: String!
  creatorID: ID!
  creator: User @connection(fields: ["creatorID"])
  description: String
  logo: S3Object
  links: AWSJSON
  host: [Host] @connection(keyName:"HostOrganization", fields: ["id"])
  admins: [Admin] @connection(keyName: "AdminOrganization", fields: ["id"])
}

type Speaker @model @searchable{
  id: ID!
  name: String!
  avatar: S3Object
  bio: String
  speaking: [Speaking] @connection(keyName: "SpeakingSpeaker", fields: ["id"])
}

type Admin @model(queries: null)
  @key(name: "AdminOrganization", fields: ["organizationID", "userID"])
  @key(name: "AdminUser", fields: ["userID", "organizationID"]) {
  id: ID!
  organizationID: ID!
  userID: ID!
  organization: Organization! @connection(fields: ["organizationID"])
  user: User! @connection(fields: ["userID"])
}

type Attendence @model(queries: null)
  @key(name: "AttendenceEvent", fields: ["eventID", "userID"])
  @key(name: "AttendenceUser", fields: ["userID", "eventID"]) {
  id: ID!
  eventID: ID!
  userID: ID!
  event: Event! @connection(fields: ["eventID"])
  user: User! @connection(fields: ["userID"])
}

type Host @model(queries: null)
  @key(name: "HostEvent", fields: ["eventID", "organizationID"])
  @key(name: "HostOrganization", fields: ["organizationID", "eventID"]) {
  id: ID!
  organizationID: ID!
  eventID: ID!
  organization: Organization! @connection(fields: ["organizationID"])
  event: Event! @connection(fields: ["eventID"])
}

type Speaking @model(queries: null)
  @key(name: "SpeakingEvent", fields: ["eventID", "speakerID"])
  @key(name: "SpeakingSpeaker", fields: ["speakerID", "eventID"]) {
  id: ID!
  eventID: ID!
  speakerID: ID!
  event: Event! @connection(fields: ["eventID"])
  speaker: Speaker! @connection(fields: ["speakerID"])
}
