  # @auth(rules: [{allow: groups, groupsField: "groups"}])

type Event @model
 {
  id: ID!
  title: String!
  description: String
  date: AWSTimestamp
  place: String
  # new attempt
  host: [Host] @connection(keyName: "byEvent", fields: ["id"])
  attendence: Attendence @connection(keyName:"EventAttendence")
  speaking: Speaking @connection(keyName: "EventSpeaking")
}

type User @model {
  id: ID!
  cognitoId: String!
  attendence: Attendence @connection(keyName: "UserAttendence")
  organizations: Owner @connection(keyName: "UserOwner")
  speaker: Speaker @connection(keyName: "UserSpeaker")
}

type Organization @model @auth(rules: [
   { allow: owner },
   { allow: owner, ownerField: "admins", operations: [update] }
]){
  id: ID!
  name: String!
  owner: String
  admins: [String]
  host: [Host] @connection(keyName:"byOrganization", fields: ["id"])
}

type Speaker @model{
  id: ID!
  name: String!
  speaking: Speaking @connection(keyName:"SpeakerSpeaking")
  user: User @connection(keyName:"UserSpeaker")
}

type Attendence @model{
  id: ID!
  event: Event @connection(keyName: "EventAttendence")
  user: User @connection(keyName: "UserAttendence")
}

type Owner @model {
  id: ID!
  organization: Organization @connection(keyName: "OrganizationOwner")
  owner: String
  admins: [String]
}

type Host  @model(queries: null)
  @key(name: "byEvent", fields: ["postID", "editorID"])
  @key(name: "byOrganization", fields: ["editorID", "postID"]) {
  id: ID!
  organizationID: ID!
  eventID: ID!
  organization: Organization @connection(fields: ["organizationID"])
  event: Event @connection(fields: ["eventID"])
}

type Speaking @model(queries: null){
  id: ID!
  speaker: Speaker @connection(keyName: "SpeakerSpeaking")
  event: Event @connection(keyName: "EventSpeaking")
}

# type Blog @model {
#   id: ID!
#   name: String!
#   posts: [Post] @connection(keyName: "BlogPosts")
# }
# type Post @model {
#   id: ID!
#   title: String!
#   blog: Blog @connection(keyName: "BlogPosts")
#   comments: [Comment] @connection(keyName: "PostComments")
# }
# type Comment @model {
#   id: ID!
#   content: String
#   post: Post @connection(keyName: "PostComments")
# }
# type Posty @model @auth(rules: [{allow: public}]) {
#   id: ID!
#   title: String!
# }
